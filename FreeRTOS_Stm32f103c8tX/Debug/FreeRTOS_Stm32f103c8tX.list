
FreeRTOS_Stm32f103c8tX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004904  08004904  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004904  08004904  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004904  08004904  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800490c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  20000060  0800496c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  0800496c  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fb2  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7e  00000000  00000000  0003107e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c53  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e9f  00000000  00000000  00035823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d81  00000000  00000000  0004e6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090d70  00000000  00000000  00061443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004468  00000000  00000000  000f21b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000f661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004884 	.word	0x08004884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004884 	.word	0x08004884

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	60f8      	str	r0, [r7, #12]
 800016c:	60b9      	str	r1, [r7, #8]
 800016e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	4a06      	ldr	r2, [pc, #24]	; (800018c <vApplicationGetIdleTaskMemory+0x28>)
 8000174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000176:	68bb      	ldr	r3, [r7, #8]
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <vApplicationGetIdleTaskMemory+0x2c>)
 800017a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2280      	movs	r2, #128	; 0x80
 8000180:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000182:	bf00      	nop
 8000184:	3714      	adds	r7, #20
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	2000007c 	.word	0x2000007c
 8000190:	2000011c 	.word	0x2000011c

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019a:	f000 fb1d 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019e:	f000 f83b 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a2:	f000 f89f 	bl	80002e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f873 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  xQueue = xQueueCreate(QUEUE_LENGTH, ITEM_SIZE);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2104      	movs	r1, #4
 80001ae:	200a      	movs	r0, #10
 80001b0:	f002 fc98 	bl	8002ae4 <xQueueGenericCreate>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4a11      	ldr	r2, [pc, #68]	; (80001fc <main+0x68>)
 80001b8:	6013      	str	r3, [r2, #0]
  if (xQueue == NULL)
  	  {
          // Error handler
      }

  xTaskCreate(LedTask, "LED Task", 128, NULL, 1, NULL);
 80001ba:	2300      	movs	r3, #0
 80001bc:	9301      	str	r3, [sp, #4]
 80001be:	2301      	movs	r3, #1
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	2280      	movs	r2, #128	; 0x80
 80001c6:	490e      	ldr	r1, [pc, #56]	; (8000200 <main+0x6c>)
 80001c8:	480e      	ldr	r0, [pc, #56]	; (8000204 <main+0x70>)
 80001ca:	f003 f833 	bl	8003234 <xTaskCreate>
  xTaskCreate(ButtonTask, "Button Task", 128, NULL, 1, NULL);
 80001ce:	2300      	movs	r3, #0
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	2301      	movs	r3, #1
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2300      	movs	r3, #0
 80001d8:	2280      	movs	r2, #128	; 0x80
 80001da:	490b      	ldr	r1, [pc, #44]	; (8000208 <main+0x74>)
 80001dc:	480b      	ldr	r0, [pc, #44]	; (800020c <main+0x78>)
 80001de:	f003 f829 	bl	8003234 <xTaskCreate>
  xTaskCreate(UartTask, "UART Task", 128, NULL, 1, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2280      	movs	r2, #128	; 0x80
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <main+0x7c>)
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x80>)
 80001f2:	f003 f81f 	bl	8003234 <xTaskCreate>

   vTaskStartScheduler();
 80001f6:	f003 f997 	bl	8003528 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x66>
 80001fc:	2000031c 	.word	0x2000031c
 8000200:	0800489c 	.word	0x0800489c
 8000204:	08000399 	.word	0x08000399
 8000208:	080048a8 	.word	0x080048a8
 800020c:	08000425 	.word	0x08000425
 8000210:	080048b4 	.word	0x080048b4
 8000214:	0800047d 	.word	0x0800047d

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f004 fa32 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000246:	2300      	movs	r3, #0
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fe74 	bl	8000f3c <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800025a:	f000 f951 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 f8e2 	bl	8001440 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 f93d 	bl	8000500 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f001 fcc2 	bl	8001c50 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f915 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000320 	.word	0x20000320
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_GPIO_Init+0xa8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a23      	ldr	r2, [pc, #140]	; (800038c <MX_GPIO_Init+0xa8>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1d      	ldr	r2, [pc, #116]	; (800038c <MX_GPIO_Init+0xa8>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0xa8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a17      	ldr	r2, [pc, #92]	; (800038c <MX_GPIO_Init+0xa8>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_GPIO_Init+0xa8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	4812      	ldr	r0, [pc, #72]	; (8000390 <MX_GPIO_Init+0xac>)
 8000348:	f000 fda5 	bl	8000e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800034c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	480a      	ldr	r0, [pc, #40]	; (8000390 <MX_GPIO_Init+0xac>)
 8000366:	f000 fbfb 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800036a:	2308      	movs	r3, #8
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_GPIO_Init+0xb0>)
 800037e:	f000 fbef 	bl	8000b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	bf00      	nop
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40011000 	.word	0x40011000
 8000394:	40010800 	.word	0x40010800

08000398 <LedTask>:

/* USER CODE BEGIN 4 */
void LedTask(void *pvParameters)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
    char *message;
    for (;;) {
        if (xQueueReceive(xQueue, &message, portMAX_DELAY) == pdPASS) {
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <LedTask+0x78>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f107 010c 	add.w	r1, r7, #12
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 fcf5 	bl	8002d9c <xQueueReceive>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d1f3      	bne.n	80003a0 <LedTask+0x8>
            if (strcmp(message, "TOGGLE") == 0) {
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4916      	ldr	r1, [pc, #88]	; (8000414 <LedTask+0x7c>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fec7 	bl	8000150 <strcmp>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d105      	bne.n	80003d4 <LedTask+0x3c>
                HAL_GPIO_TogglePin(LED_GPIO_PORT, LED_PIN);
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	4812      	ldr	r0, [pc, #72]	; (8000418 <LedTask+0x80>)
 80003ce:	f000 fd7a 	bl	8000ec6 <HAL_GPIO_TogglePin>
 80003d2:	e7e5      	b.n	80003a0 <LedTask+0x8>
            } else if (strcmp(message, "ON") == 0) {
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	4911      	ldr	r1, [pc, #68]	; (800041c <LedTask+0x84>)
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff feb9 	bl	8000150 <strcmp>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d106      	bne.n	80003f2 <LedTask+0x5a>
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <LedTask+0x80>)
 80003ec:	f000 fd53 	bl	8000e96 <HAL_GPIO_WritePin>
 80003f0:	e7d6      	b.n	80003a0 <LedTask+0x8>
            } else if (strcmp(message, "OFF") == 0) {
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	490a      	ldr	r1, [pc, #40]	; (8000420 <LedTask+0x88>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff feaa 	bl	8000150 <strcmp>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1ce      	bne.n	80003a0 <LedTask+0x8>
                HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <LedTask+0x80>)
 800040a:	f000 fd44 	bl	8000e96 <HAL_GPIO_WritePin>
        if (xQueueReceive(xQueue, &message, portMAX_DELAY) == pdPASS) {
 800040e:	e7c7      	b.n	80003a0 <LedTask+0x8>
 8000410:	2000031c 	.word	0x2000031c
 8000414:	080048c0 	.word	0x080048c0
 8000418:	40011000 	.word	0x40011000
 800041c:	080048c8 	.word	0x080048c8
 8000420:	080048cc 	.word	0x080048cc

08000424 <ButtonTask>:
        }
    }
}

void ButtonTask(void *pvParameters)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    static GPIO_PinState lastState = GPIO_PIN_RESET;
    GPIO_PinState currentState;
    for (;;) {
        currentState = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN);
 800042c:	2108      	movs	r1, #8
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <ButtonTask+0x48>)
 8000430:	f000 fd1a 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	73fb      	strb	r3, [r7, #15]
        if (currentState != lastState) {
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <ButtonTask+0x4c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	429a      	cmp	r2, r3
 8000440:	d00f      	beq.n	8000462 <ButtonTask+0x3e>
            if (currentState == GPIO_PIN_SET) {
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d109      	bne.n	800045c <ButtonTask+0x38>
                char *msg = "TOGGLE";
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <ButtonTask+0x50>)
 800044a:	60bb      	str	r3, [r7, #8]
                xQueueSend(xQueue, &msg, 0);
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <ButtonTask+0x54>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	f107 0108 	add.w	r1, r7, #8
 8000454:	2300      	movs	r3, #0
 8000456:	2200      	movs	r2, #0
 8000458:	f002 fba2 	bl	8002ba0 <xQueueGenericSend>
            }
            lastState = currentState;
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <ButtonTask+0x4c>)
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	7013      	strb	r3, [r2, #0]
        }
        vTaskDelay(pdMS_TO_TICKS(50));
 8000462:	2032      	movs	r0, #50	; 0x32
 8000464:	f003 f82c 	bl	80034c0 <vTaskDelay>
        currentState = HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_PIN);
 8000468:	e7e0      	b.n	800042c <ButtonTask+0x8>
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800
 8000470:	20000368 	.word	0x20000368
 8000474:	080048c0 	.word	0x080048c0
 8000478:	2000031c 	.word	0x2000031c

0800047c <UartTask>:
    }
}

void UartTask(void *pvParameters)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    char *uartMsg;
    char recvChar;
    for (;;) {
        if (HAL_UART_Receive(&huart1, (uint8_t *)&recvChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000484:	f107 010b 	add.w	r1, r7, #11
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
 800048c:	2201      	movs	r2, #1
 800048e:	4811      	ldr	r0, [pc, #68]	; (80004d4 <UartTask+0x58>)
 8000490:	f001 fc2e 	bl	8001cf0 <HAL_UART_Receive>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f4      	bne.n	8000484 <UartTask+0x8>
            switch(recvChar) {
 800049a:	7afb      	ldrb	r3, [r7, #11]
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d001      	beq.n	80004a4 <UartTask+0x28>
 80004a0:	2b0d      	cmp	r3, #13
 80004a2:	d10d      	bne.n	80004c0 <UartTask+0x44>
                case '\r':
                case '\n':
                    if (uartMsg != NULL) {
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d012      	beq.n	80004d0 <UartTask+0x54>
                        xQueueSend(xQueue, &uartMsg, 0);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <UartTask+0x5c>)
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	f107 010c 	add.w	r1, r7, #12
 80004b2:	2300      	movs	r3, #0
 80004b4:	2200      	movs	r2, #0
 80004b6:	f002 fb73 	bl	8002ba0 <xQueueGenericSend>
                        uartMsg = NULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
                    }
                    break;
 80004be:	e007      	b.n	80004d0 <UartTask+0x54>
                default:
                    // Accumulate characters to form a command word
                    strncat(uartMsg, &recvChar, 1);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f107 010b 	add.w	r1, r7, #11
 80004c6:	2201      	movs	r2, #1
 80004c8:	4618      	mov	r0, r3
 80004ca:	f004 f8e9 	bl	80046a0 <strncat>
                    break;
 80004ce:	e000      	b.n	80004d2 <UartTask+0x56>
                    break;
 80004d0:	bf00      	nop
        if (HAL_UART_Receive(&huart1, (uint8_t *)&recvChar, 1, HAL_MAX_DELAY) == HAL_OK) {
 80004d2:	e7d7      	b.n	8000484 <UartTask+0x8>
 80004d4:	20000320 	.word	0x20000320
 80004d8:	2000031c 	.word	0x2000031c

080004dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d101      	bne.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ee:	f000 f989 	bl	8000804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40000800 	.word	0x40000800

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <HAL_MspInit+0x68>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <HAL_MspInit+0x68>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_MspInit+0x68>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_MspInit+0x68>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <HAL_MspInit+0x68>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x68>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	210f      	movs	r1, #15
 8000546:	f06f 0001 	mvn.w	r0, #1
 800054a:	f000 fa2c 	bl	80009a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_MspInit+0x6c>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_MspInit+0x6c>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a20      	ldr	r2, [pc, #128]	; (8000618 <HAL_UART_MspInit+0x9c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d139      	bne.n	8000610 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <HAL_UART_MspInit+0xa0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1e      	ldr	r2, [pc, #120]	; (800061c <HAL_UART_MspInit+0xa0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <HAL_UART_MspInit+0xa0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <HAL_UART_MspInit+0xa0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a18      	ldr	r2, [pc, #96]	; (800061c <HAL_UART_MspInit+0xa0>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <HAL_UART_MspInit+0xa0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <HAL_UART_MspInit+0xa4>)
 80005e2:	f000 fabd 	bl	8000b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <HAL_UART_MspInit+0xa4>)
 80005fc:	f000 fab0 	bl	8000b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2105      	movs	r1, #5
 8000604:	2025      	movs	r0, #37	; 0x25
 8000606:	f000 f9ce 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800060a:	2025      	movs	r0, #37	; 0x25
 800060c:	f000 f9e7 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40013800 	.word	0x40013800
 800061c:	40021000 	.word	0x40021000
 8000620:	40010800 	.word	0x40010800

08000624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	; 0x38
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800062c:	2300      	movs	r3, #0
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000634:	2300      	movs	r3, #0
 8000636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <HAL_InitTick+0xe8>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <HAL_InitTick+0xe8>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <HAL_InitTick+0xe8>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000652:	f107 0210 	add.w	r2, r7, #16
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f85f 	bl	8001720 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000662:	6a3b      	ldr	r3, [r7, #32]
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000668:	2b00      	cmp	r3, #0
 800066a:	d103      	bne.n	8000674 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800066c:	f001 f830 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8000670:	6378      	str	r0, [r7, #52]	; 0x34
 8000672:	e004      	b.n	800067e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000674:	f001 f82c 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8000678:	4603      	mov	r3, r0
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <HAL_InitTick+0xec>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	0c9b      	lsrs	r3, r3, #18
 8000688:	3b01      	subs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <HAL_InitTick+0xf0>)
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_InitTick+0xf4>)
 8000690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <HAL_InitTick+0xf0>)
 8000694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000698:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <HAL_InitTick+0xf0>)
 800069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <HAL_InitTick+0xf0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_InitTick+0xf0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_InitTick+0xf0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <HAL_InitTick+0xf0>)
 80006b4:	f001 f882 	bl	80017bc <HAL_TIM_Base_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d11b      	bne.n	80006fe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <HAL_InitTick+0xf0>)
 80006c8:	f001 f8d0 	bl	800186c <HAL_TIM_Base_Start_IT>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d111      	bne.n	80006fe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006da:	201e      	movs	r0, #30
 80006dc:	f000 f97f 	bl	80009de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	d808      	bhi.n	80006f8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006e6:	2200      	movs	r2, #0
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	201e      	movs	r0, #30
 80006ec:	f000 f95b 	bl	80009a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_InitTick+0xf8>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e002      	b.n	80006fe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000702:	4618      	mov	r0, r3
 8000704:	3738      	adds	r7, #56	; 0x38
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	431bde83 	.word	0x431bde83
 8000714:	2000036c 	.word	0x2000036c
 8000718:	40000800 	.word	0x40000800
 800071c:	20000004 	.word	0x20000004

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800074e:	2010      	movs	r0, #16
 8000750:	f000 fbd2 	bl	8000ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <TIM4_IRQHandler+0x10>)
 800075e:	f001 f8d7 	bl	8001910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000036c 	.word	0x2000036c

0800076c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USART1_IRQHandler+0x10>)
 8000772:	f001 fb4f 	bl	8001e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000320 	.word	0x20000320

08000780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800078c:	f7ff fff8 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a8:	4c09      	ldr	r4, [pc, #36]	; (80007d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f003 ffdd 	bl	8004774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fceb 	bl	8000194 <main>
  bx lr
 80007be:	4770      	bx	lr
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007c8:	0800490c 	.word	0x0800490c
  ldr r2, =_sbss
 80007cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007d0:	20001244 	.word	0x20001244

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f8d1 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f7ff ff18 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe8a 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	200003b4 	.word	0x200003b4

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	200003b4 	.word	0x200003b4

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4906      	ldr	r1, [pc, #24]	; (80008d4 <__NVIC_EnableIRQ+0x34>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff4f 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff64 	bl	8000884 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ffb2 	bl	800092c <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff81 	bl	80008d8 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff57 	bl	80008a0 <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d008      	beq.n	8000a24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2204      	movs	r2, #4
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e020      	b.n	8000a66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 020e 	bic.w	r2, r2, #14
 8000a32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 0201 	bic.w	r2, r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d005      	beq.n	8000a94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e051      	b.n	8000b38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 020e 	bic.w	r2, r2, #14
 8000aa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0201 	bic.w	r2, r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_DMA_Abort_IT+0xd4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d029      	beq.n	8000b12 <HAL_DMA_Abort_IT+0xa2>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <HAL_DMA_Abort_IT+0xd8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d022      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x9e>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_DMA_Abort_IT+0xdc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d01a      	beq.n	8000b08 <HAL_DMA_Abort_IT+0x98>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_DMA_Abort_IT+0xe0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d012      	beq.n	8000b02 <HAL_DMA_Abort_IT+0x92>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_DMA_Abort_IT+0xe4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00a      	beq.n	8000afc <HAL_DMA_Abort_IT+0x8c>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_DMA_Abort_IT+0xe8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d102      	bne.n	8000af6 <HAL_DMA_Abort_IT+0x86>
 8000af0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000af4:	e00e      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000afa:	e00b      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b00:	e008      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	e005      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	e002      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000b0e:	2310      	movs	r3, #16
 8000b10:	e000      	b.n	8000b14 <HAL_DMA_Abort_IT+0xa4>
 8000b12:	2301      	movs	r3, #1
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_DMA_Abort_IT+0xec>)
 8000b16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	4798      	blx	r3
    } 
  }
  return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020008 	.word	0x40020008
 8000b48:	4002001c 	.word	0x4002001c
 8000b4c:	40020030 	.word	0x40020030
 8000b50:	40020044 	.word	0x40020044
 8000b54:	40020058 	.word	0x40020058
 8000b58:	4002006c 	.word	0x4002006c
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08b      	sub	sp, #44	; 0x2c
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b72:	e169      	b.n	8000e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b74:	2201      	movs	r2, #1
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 8158 	bne.w	8000e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4a9a      	ldr	r2, [pc, #616]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d05e      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000b9c:	4a98      	ldr	r2, [pc, #608]	; (8000e00 <HAL_GPIO_Init+0x2a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d875      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000ba2:	4a98      	ldr	r2, [pc, #608]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d058      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000ba8:	4a96      	ldr	r2, [pc, #600]	; (8000e04 <HAL_GPIO_Init+0x2a4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d86f      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bae:	4a96      	ldr	r2, [pc, #600]	; (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d052      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bb4:	4a94      	ldr	r2, [pc, #592]	; (8000e08 <HAL_GPIO_Init+0x2a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d869      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bba:	4a94      	ldr	r2, [pc, #592]	; (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d04c      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bc0:	4a92      	ldr	r2, [pc, #584]	; (8000e0c <HAL_GPIO_Init+0x2ac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d863      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bc6:	4a92      	ldr	r2, [pc, #584]	; (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d046      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a90      	ldr	r2, [pc, #576]	; (8000e10 <HAL_GPIO_Init+0x2b0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d85d      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d82a      	bhi.n	8000c2c <HAL_GPIO_Init+0xcc>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d859      	bhi.n	8000c8e <HAL_GPIO_Init+0x12e>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <HAL_GPIO_Init+0x80>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c35 	.word	0x08000c35
 8000be8:	08000c47 	.word	0x08000c47
 8000bec:	08000c89 	.word	0x08000c89
 8000bf0:	08000c8f 	.word	0x08000c8f
 8000bf4:	08000c8f 	.word	0x08000c8f
 8000bf8:	08000c8f 	.word	0x08000c8f
 8000bfc:	08000c8f 	.word	0x08000c8f
 8000c00:	08000c8f 	.word	0x08000c8f
 8000c04:	08000c8f 	.word	0x08000c8f
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000c8f 	.word	0x08000c8f
 8000c10:	08000c8f 	.word	0x08000c8f
 8000c14:	08000c8f 	.word	0x08000c8f
 8000c18:	08000c8f 	.word	0x08000c8f
 8000c1c:	08000c8f 	.word	0x08000c8f
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c3d 	.word	0x08000c3d
 8000c28:	08000c51 	.word	0x08000c51
 8000c2c:	4a79      	ldr	r2, [pc, #484]	; (8000e14 <HAL_GPIO_Init+0x2b4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e02c      	b.n	8000c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e029      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	3304      	adds	r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e024      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e01f      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	330c      	adds	r3, #12
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e01a      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c62:	2304      	movs	r3, #4
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e013      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	611a      	str	r2, [r3, #16]
          break;
 8000c7a:	e009      	b.n	8000c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	615a      	str	r2, [r3, #20]
          break;
 8000c86:	e003      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
          break;
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x130>
          break;
 8000c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d801      	bhi.n	8000c9a <HAL_GPIO_Init+0x13a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_Init+0x13e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d802      	bhi.n	8000cac <HAL_GPIO_Init+0x14c>
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	e002      	b.n	8000cb2 <HAL_GPIO_Init+0x152>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	210f      	movs	r1, #15
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	6a39      	ldr	r1, [r7, #32]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce0:	4b4d      	ldr	r3, [pc, #308]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a4c      	ldr	r2, [pc, #304]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a40      	ldr	r2, [pc, #256]	; (8000e20 <HAL_GPIO_Init+0x2c0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <HAL_GPIO_Init+0x2c4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	; (8000e28 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3d      	ldr	r2, [pc, #244]	; (8000e2c <HAL_GPIO_Init+0x2cc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2304      	movs	r3, #4
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d5e:	492f      	ldr	r1, [pc, #188]	; (8000e1c <HAL_GPIO_Init+0x2bc>)
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	492c      	ldr	r1, [pc, #176]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4928      	ldr	r1, [pc, #160]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	4922      	ldr	r1, [pc, #136]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	491e      	ldr	r1, [pc, #120]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4918      	ldr	r1, [pc, #96]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4914      	ldr	r1, [pc, #80]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d021      	beq.n	8000e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	490e      	ldr	r1, [pc, #56]	; (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
 8000dfc:	e021      	b.n	8000e42 <HAL_GPIO_Init+0x2e2>
 8000dfe:	bf00      	nop
 8000e00:	10320000 	.word	0x10320000
 8000e04:	10310000 	.word	0x10310000
 8000e08:	10220000 	.word	0x10220000
 8000e0c:	10210000 	.word	0x10210000
 8000e10:	10120000 	.word	0x10120000
 8000e14:	10110000 	.word	0x10110000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40010800 	.word	0x40010800
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	40011400 	.word	0x40011400
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	; (8000e64 <HAL_GPIO_Init+0x304>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae8e 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb2:	e003      	b.n	8000ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	611a      	str	r2, [r3, #16]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f806 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e272      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8087 	beq.w	800106a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d00c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f68:	4b8f      	ldr	r3, [pc, #572]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d112      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
 8000f74:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f80:	d10b      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06c      	beq.n	8001068 <HAL_RCC_OscConfig+0x12c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d168      	bne.n	8001068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e24c      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x76>
 8000fa4:	4b80      	ldr	r3, [pc, #512]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a7f      	ldr	r2, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e02e      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b7b      	ldr	r3, [pc, #492]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7a      	ldr	r2, [pc, #488]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b78      	ldr	r3, [pc, #480]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a77      	ldr	r2, [pc, #476]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xbc>
 8000fde:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a71      	ldr	r2, [pc, #452]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6e      	ldr	r2, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6a      	ldr	r2, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a67      	ldr	r2, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc06 	bl	8000828 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fc02 	bl	8000828 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e200      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xe4>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fbf2 	bl	8000828 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fbee 	bl	8000828 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1ec      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x10c>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d063      	beq.n	800113e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001076:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1c0      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4939      	ldr	r1, [pc, #228]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e03a      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x270>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fba7 	bl	8000828 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fba3 	bl	8000828 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4927      	ldr	r1, [pc, #156]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_RCC_OscConfig+0x270>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fb86 	bl	8000828 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fb82 	bl	8000828 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e180      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d03a      	beq.n	80011c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d019      	beq.n	8001186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fb66 	bl	8000828 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fb62 	bl	8000828 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e160      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fafe 	bl	8001780 <RCC_Delay>
 8001184:	e01c      	b.n	80011c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fb4c 	bl	8000828 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001192:	e00f      	b.n	80011b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fb48 	bl	8000828 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d908      	bls.n	80011b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e146      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	42420000 	.word	0x42420000
 80011b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e9      	bne.n	8001194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a6 	beq.w	800131a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a87      	ldr	r2, [pc, #540]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x4c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7e      	ldr	r2, [pc, #504]	; (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb09 	bl	8000828 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fb05 	bl	8000828 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e103      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b75      	ldr	r3, [pc, #468]	; (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x312>
 8001240:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a6e      	ldr	r2, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e02d      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x334>
 8001256:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	4b67      	ldr	r3, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a66      	ldr	r2, [pc, #408]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	e01c      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x356>
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a60      	ldr	r2, [pc, #384]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a5d      	ldr	r2, [pc, #372]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001292:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a5a      	ldr	r2, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a57      	ldr	r2, [pc, #348]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fab9 	bl	8000828 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fab5 	bl	8000828 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0b1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ee      	beq.n	80012ba <HAL_RCC_OscConfig+0x37e>
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff faa3 	bl	8000828 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fa9f 	bl	8000828 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e09b      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ee      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d105      	bne.n	800131a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d061      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d146      	bne.n	80013c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fa73 	bl	8000828 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fa6f 	bl	8000828 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e06d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4921      	ldr	r1, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a19      	ldr	r1, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	430b      	orrs	r3, r1
 8001392:	491b      	ldr	r1, [pc, #108]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fa43 	bl	8000828 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fa3f 	bl	8000828 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e03d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46a>
 80013c4:	e035      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_RCC_OscConfig+0x4cc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa2c 	bl	8000828 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fa28 	bl	8000828 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e026      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x498>
 80013f2:	e01e      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e019      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 8001400:	40021000 	.word	0x40021000
 8001404:	40007000 	.word	0x40007000
 8001408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_OscConfig+0x500>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0d0      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d910      	bls.n	8001484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b67      	ldr	r3, [pc, #412]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	4965      	ldr	r1, [pc, #404]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0b8      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800149c:	4b59      	ldr	r3, [pc, #356]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	494d      	ldr	r1, [pc, #308]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d040      	beq.n	8001560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e07f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e073      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06b      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4936      	ldr	r1, [pc, #216]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff f97a 	bl	8000828 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff f976 	bl	8000828 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e053      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d210      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4922      	ldr	r1, [pc, #136]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e032      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4916      	ldr	r1, [pc, #88]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	490e      	ldr	r1, [pc, #56]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ce:	f000 f821 	bl	8001614 <HAL_RCC_GetSysClockFreq>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	490a      	ldr	r1, [pc, #40]	; (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015e0:	5ccb      	ldrb	r3, [r1, r3]
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <HAL_RCC_ClockConfig+0x1cc>)
 80015e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_ClockConfig+0x1d0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f818 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000
 8001604:	40021000 	.word	0x40021000
 8001608:	080048d8 	.word	0x080048d8
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d002      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x30>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x36>
 8001642:	e027      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001646:	613b      	str	r3, [r7, #16]
      break;
 8001648:	e027      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0c9b      	lsrs	r3, r3, #18
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d010      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0c5b      	lsrs	r3, r3, #17
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001676:	fb03 f202 	mul.w	r2, r3, r2
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e004      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
      break;
 8001692:	e002      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001696:	613b      	str	r3, [r7, #16]
      break;
 8001698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169a:	693b      	ldr	r3, [r7, #16]
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	080048f0 	.word	0x080048f0
 80016b4:	08004900 	.word	0x08004900
 80016b8:	003d0900 	.word	0x003d0900

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080048e8 	.word	0x080048e8

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffde 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	080048e8 	.word	0x080048e8

08001720 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220f      	movs	r2, #15
 800172e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0207 	and.w	r2, r3, #7
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40022000 	.word	0x40022000

08001780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <RCC_Delay+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <RCC_Delay+0x38>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800179c:	bf00      	nop
  }
  while (Delay --);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	60fa      	str	r2, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <RCC_Delay+0x1c>
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000000 	.word	0x20000000
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e041      	b.n	8001852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f839 	bl	800185a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 f9b4 	bl	8001b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e03a      	b.n	80018fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_TIM_Base_Start_IT+0x98>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00e      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ae:	d009      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_TIM_Base_Start_IT+0x9c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_TIM_Base_Start_IT+0xa0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d010      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	e007      	b.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d122      	bne.n	800196c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d11b      	bne.n	800196c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0202 	mvn.w	r2, #2
 800193c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f8ed 	bl	8001b32 <HAL_TIM_IC_CaptureCallback>
 8001958:	e005      	b.n	8001966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8e0 	bl	8001b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f8ef 	bl	8001b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b04      	cmp	r3, #4
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0204 	mvn.w	r2, #4
 8001990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8c3 	bl	8001b32 <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8b6 	bl	8001b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8c5 	bl	8001b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0208 	mvn.w	r2, #8
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2204      	movs	r2, #4
 80019ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f899 	bl	8001b32 <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f88c 	bl	8001b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f89b 	bl	8001b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b10      	cmp	r3, #16
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0210 	mvn.w	r2, #16
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f86f 	bl	8001b32 <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f862 	bl	8001b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f871 	bl	8001b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0201 	mvn.w	r2, #1
 8001a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fd24 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8bf 	bl	8001c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d10e      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad8:	2b40      	cmp	r3, #64	; 0x40
 8001ada:	d107      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f835 	bl	8001b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d10e      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d107      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0220 	mvn.w	r2, #32
 8001b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f88a 	bl	8001c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <TIM_Base_SetConfig+0xb8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00b      	beq.n	8001b98 <TIM_Base_SetConfig+0x30>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b86:	d007      	beq.n	8001b98 <TIM_Base_SetConfig+0x30>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <TIM_Base_SetConfig+0xbc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <TIM_Base_SetConfig+0x30>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <TIM_Base_SetConfig+0xc0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <TIM_Base_SetConfig+0xb8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00b      	beq.n	8001bca <TIM_Base_SetConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d007      	beq.n	8001bca <TIM_Base_SetConfig+0x62>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <TIM_Base_SetConfig+0xbc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d003      	beq.n	8001bca <TIM_Base_SetConfig+0x62>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <TIM_Base_SetConfig+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d108      	bne.n	8001bdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <TIM_Base_SetConfig+0xb8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d103      	bne.n	8001c10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	615a      	str	r2, [r3, #20]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800

08001c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e042      	b.n	8001ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fc80 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fd7f 	bl	8002798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d17c      	bne.n	8001e0a <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_UART_Receive+0x2c>
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e075      	b.n	8001e0c <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2222      	movs	r2, #34	; 0x22
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d34:	f7fe fd78 	bl	8000828 <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4e:	d108      	bne.n	8001d62 <HAL_UART_Receive+0x72>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	e003      	b.n	8001d6a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d6a:	e043      	b.n	8001df4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2120      	movs	r1, #32
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fb04 	bl	8002384 <UART_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e042      	b.n	8001e0c <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3302      	adds	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	e01f      	b.n	8001de6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	d007      	beq.n	8001dc0 <HAL_UART_Receive+0xd0>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_UART_Receive+0xde>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e008      	b.n	8001de0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3301      	adds	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1b6      	bne.n	8001d6c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0ba      	sub	sp, #232	; 0xe8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_UART_IRQHandler+0x66>
 8001e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fbd1 	bl	800261a <UART_Receive_IT>
      return;
 8001e78:	e25b      	b.n	8002332 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80de 	beq.w	8002040 <HAL_UART_IRQHandler+0x22c>
 8001e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80d1 	beq.w	8002040 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_UART_IRQHandler+0xae>
 8001eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xd2>
 8001ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0202 	orr.w	r2, r3, #2
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_UART_IRQHandler+0xf6>
 8001ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f043 0204 	orr.w	r2, r3, #4
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d011      	beq.n	8001f3a <HAL_UART_IRQHandler+0x126>
 8001f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f043 0208 	orr.w	r2, r3, #8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 81f2 	beq.w	8002328 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_UART_IRQHandler+0x14e>
 8001f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fb5c 	bl	800261a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_UART_IRQHandler+0x17a>
 8001f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d04f      	beq.n	800202e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa66 	bl	8002460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d041      	beq.n	8002026 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3314      	adds	r3, #20
 8001fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fb0:	e853 3f00 	ldrex	r3, [r3]
 8001fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3314      	adds	r3, #20
 8001fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fde:	e841 2300 	strex	r3, r2, [r1]
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1d9      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d013      	beq.n	800201e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	4a7e      	ldr	r2, [pc, #504]	; (80021f4 <HAL_UART_IRQHandler+0x3e0>)
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fd34 	bl	8000a70 <HAL_DMA_Abort_IT>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002018:	4610      	mov	r0, r2
 800201a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201c:	e00e      	b.n	800203c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f99c 	bl	800235c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	e00a      	b.n	800203c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f998 	bl	800235c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202c:	e006      	b.n	800203c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f994 	bl	800235c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800203a:	e175      	b.n	8002328 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203c:	bf00      	nop
    return;
 800203e:	e173      	b.n	8002328 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	2b01      	cmp	r3, #1
 8002046:	f040 814f 	bne.w	80022e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8148 	beq.w	80022e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8141 	beq.w	80022e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80b6 	beq.w	80021f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8145 	beq.w	800232c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020aa:	429a      	cmp	r2, r3
 80020ac:	f080 813e 	bcs.w	800232c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f000 8088 	beq.w	80021d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	330c      	adds	r3, #12
 80020ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020d2:	e853 3f00 	ldrex	r3, [r3]
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	330c      	adds	r3, #12
 80020ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002100:	e841 2300 	strex	r3, r2, [r1]
 8002104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1d9      	bne.n	80020c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3314      	adds	r3, #20
 8002116:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211a:	e853 3f00 	ldrex	r3, [r3]
 800211e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3314      	adds	r3, #20
 8002130:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002134:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002138:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800213c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002140:	e841 2300 	strex	r3, r2, [r1]
 8002144:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e1      	bne.n	8002110 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3314      	adds	r3, #20
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002156:	e853 3f00 	ldrex	r3, [r3]
 800215a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800215c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002170:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002174:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002176:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002178:	e841 2300 	strex	r3, r2, [r1]
 800217c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800217e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e3      	bne.n	800214c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	330c      	adds	r3, #12
 8002198:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219c:	e853 3f00 	ldrex	r3, [r3]
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	f023 0310 	bic.w	r3, r3, #16
 80021a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80021c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e3      	bne.n	8002192 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fc13 	bl	80009fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8bf 	bl	800236e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021f0:	e09c      	b.n	800232c <HAL_UART_IRQHandler+0x518>
 80021f2:	bf00      	nop
 80021f4:	08002525 	.word	0x08002525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002200:	b29b      	uxth	r3, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 808e 	beq.w	8002330 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8089 	beq.w	8002330 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002242:	647a      	str	r2, [r7, #68]	; 0x44
 8002244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800224a:	e841 2300 	strex	r3, r2, [r1]
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e3      	bne.n	800221e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3314      	adds	r3, #20
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	e853 3f00 	ldrex	r3, [r3]
 8002264:	623b      	str	r3, [r7, #32]
   return(result);
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800227a:	633a      	str	r2, [r7, #48]	; 0x30
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002282:	e841 2300 	strex	r3, r2, [r1]
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1e3      	bne.n	8002256 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	330c      	adds	r3, #12
 80022a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	e853 3f00 	ldrex	r3, [r3]
 80022aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0310 	bic.w	r3, r3, #16
 80022b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022c0:	61fa      	str	r2, [r7, #28]
 80022c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c4:	69b9      	ldr	r1, [r7, #24]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	e841 2300 	strex	r3, r2, [r1]
 80022cc:	617b      	str	r3, [r7, #20]
   return(result);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e3      	bne.n	800229c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022de:	4619      	mov	r1, r3
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f844 	bl	800236e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022e6:	e023      	b.n	8002330 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d009      	beq.n	8002308 <HAL_UART_IRQHandler+0x4f4>
 80022f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f923 	bl	800254c <UART_Transmit_IT>
    return;
 8002306:	e014      	b.n	8002332 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <HAL_UART_IRQHandler+0x51e>
 8002314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f962 	bl	80025ea <UART_EndTransmit_IT>
    return;
 8002326:	e004      	b.n	8002332 <HAL_UART_IRQHandler+0x51e>
    return;
 8002328:	bf00      	nop
 800232a:	e002      	b.n	8002332 <HAL_UART_IRQHandler+0x51e>
      return;
 800232c:	bf00      	nop
 800232e:	e000      	b.n	8002332 <HAL_UART_IRQHandler+0x51e>
      return;
 8002330:	bf00      	nop
  }
}
 8002332:	37e8      	adds	r7, #232	; 0xe8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b090      	sub	sp, #64	; 0x40
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002394:	e050      	b.n	8002438 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d04c      	beq.n	8002438 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80023a4:	f7fe fa40 	bl	8000828 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d241      	bcs.n	8002438 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	330c      	adds	r3, #12
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	e853 3f00 	ldrex	r3, [r3]
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d4:	637a      	str	r2, [r7, #52]	; 0x34
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e5      	bne.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	613b      	str	r3, [r7, #16]
   return(result);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	623a      	str	r2, [r7, #32]
 800240a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	69f9      	ldr	r1, [r7, #28]
 800240e:	6a3a      	ldr	r2, [r7, #32]
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	61bb      	str	r3, [r7, #24]
   return(result);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e00f      	b.n	8002458 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4013      	ands	r3, r2
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	429a      	cmp	r2, r3
 8002454:	d09f      	beq.n	8002396 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3740      	adds	r7, #64	; 0x40
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002460:	b480      	push	{r7}
 8002462:	b095      	sub	sp, #84	; 0x54
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800247e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002488:	643a      	str	r2, [r7, #64]	; 0x40
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800248e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	e853 3f00 	ldrex	r3, [r3]
 80024aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e5      	bne.n	800249c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d119      	bne.n	800250c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	e853 3f00 	ldrex	r3, [r3]
 80024e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f023 0310 	bic.w	r3, r3, #16
 80024ee:	647b      	str	r3, [r7, #68]	; 0x44
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024f8:	61ba      	str	r2, [r7, #24]
 80024fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	e841 2300 	strex	r3, r2, [r1]
 8002504:	613b      	str	r3, [r7, #16]
   return(result);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e5      	bne.n	80024d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800251a:	bf00      	nop
 800251c:	3754      	adds	r7, #84	; 0x54
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7ff ff0c 	bl	800235c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b21      	cmp	r3, #33	; 0x21
 800255e:	d13e      	bne.n	80025de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d114      	bne.n	8002594 <UART_Transmit_IT+0x48>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d110      	bne.n	8002594 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	621a      	str	r2, [r3, #32]
 8002592:	e008      	b.n	80025a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6211      	str	r1, [r2, #32]
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4619      	mov	r1, r3
 80025b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fe94 	bl	8002338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b08c      	sub	sp, #48	; 0x30
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b22      	cmp	r3, #34	; 0x22
 800262c:	f040 80ae 	bne.w	800278c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002638:	d117      	bne.n	800266a <UART_Receive_IT+0x50>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	b29a      	uxth	r2, r3
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
 8002668:	e026      	b.n	80026b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267c:	d007      	beq.n	800268e <UART_Receive_IT+0x74>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <UART_Receive_IT+0x82>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e008      	b.n	80026ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4619      	mov	r1, r3
 80026c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d15d      	bne.n	8002788 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0220 	bic.w	r2, r2, #32
 80026da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	2b01      	cmp	r3, #1
 8002710:	d135      	bne.n	800277e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	613b      	str	r3, [r7, #16]
   return(result);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 0310 	bic.w	r3, r3, #16
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	623a      	str	r2, [r7, #32]
 800273a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	69f9      	ldr	r1, [r7, #28]
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	61bb      	str	r3, [r7, #24]
   return(result);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e5      	bne.n	8002718 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d10a      	bne.n	8002770 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fdf9 	bl	800236e <HAL_UARTEx_RxEventCallback>
 800277c:	e002      	b.n	8002784 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fde3 	bl	800234a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e002      	b.n	800278e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3730      	adds	r7, #48	; 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027d2:	f023 030c 	bic.w	r3, r3, #12
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	430b      	orrs	r3, r1
 80027de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <UART_SetConfig+0x114>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002800:	f7fe ff7a 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	e002      	b.n	800280e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002808:	f7fe ff62 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 800280c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	009a      	lsls	r2, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	0119      	lsls	r1, r3, #4
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009a      	lsls	r2, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fbb2 f2f3 	udiv	r2, r2, r3
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <UART_SetConfig+0x118>)
 8002846:	fba3 0302 	umull	r0, r3, r3, r2
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2064      	movs	r0, #100	; 0x64
 800284e:	fb00 f303 	mul.w	r3, r0, r3
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	3332      	adds	r3, #50	; 0x32
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <UART_SetConfig+0x118>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002864:	4419      	add	r1, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f2f3 	udiv	r2, r2, r3
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <UART_SetConfig+0x118>)
 800287e:	fba3 0302 	umull	r0, r3, r3, r2
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2064      	movs	r0, #100	; 0x64
 8002886:	fb00 f303 	mul.w	r3, r0, r3
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	3332      	adds	r3, #50	; 0x32
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <UART_SetConfig+0x118>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	f003 020f 	and.w	r2, r3, #15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	440a      	add	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013800 	.word	0x40013800
 80028b0:	51eb851f 	.word	0x51eb851f

080028b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0208 	add.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f103 0208 	add.w	r2, r3, #8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f103 0208 	add.w	r2, r3, #8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d103      	bne.n	8002970 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e00c      	b.n	800298a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3308      	adds	r3, #8
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e002      	b.n	800297e <vListInsert+0x2e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d2f6      	bcs.n	8002978 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6852      	ldr	r2, [r2, #4]
 80029e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d103      	bne.n	80029f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1e5a      	subs	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a3e:	f001 fb8d 	bl	800415c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	441a      	add	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	22ff      	movs	r2, #255	; 0xff
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d114      	bne.n	8002abe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01a      	beq.n	8002ad2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 ff99 	bl	80039d8 <xTaskRemoveFromEventList>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <xQueueGenericReset+0xcc>)
 8002aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	e009      	b.n	8002ad2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fef6 	bl	80028b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fef1 	bl	80028b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ad2:	f001 fb73 	bl	80041bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	613b      	str	r3, [r7, #16]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e004      	b.n	8002b24 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3348      	adds	r3, #72	; 0x48
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fbd9 	bl	80042e0 <pvPortMalloc>
 8002b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00f      	beq.n	8002b56 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	3348      	adds	r3, #72	; 0x48
 8002b3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f805 	bl	8002b60 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b56:	69bb      	ldr	r3, [r7, #24]
	}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e002      	b.n	8002b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b8e:	2101      	movs	r1, #1
 8002b90:	69b8      	ldr	r0, [r7, #24]
 8002b92:	f7ff ff3f 	bl	8002a14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	; 0x38
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <xQueueGenericSend+0x40>
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <xQueueGenericSend+0x44>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <xQueueGenericSend+0x46>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <xQueueGenericSend+0x60>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d103      	bne.n	8002c0e <xQueueGenericSend+0x6e>
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <xQueueGenericSend+0x72>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <xQueueGenericSend+0x74>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	623b      	str	r3, [r7, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c2e:	f001 f897 	bl	8003d60 <xTaskGetSchedulerState>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <xQueueGenericSend+0x9e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <xQueueGenericSend+0xa2>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <xQueueGenericSend+0xa4>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	61fb      	str	r3, [r7, #28]
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c5e:	f001 fa7d 	bl	800415c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <xQueueGenericSend+0xd4>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d129      	bne.n	8002cc8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7a:	f000 f96f 	bl	8002f5c <prvCopyDataToQueue>
 8002c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d010      	beq.n	8002caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	3324      	adds	r3, #36	; 0x24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fea3 	bl	80039d8 <xTaskRemoveFromEventList>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <xQueueGenericSend+0x1f8>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e00a      	b.n	8002cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <xQueueGenericSend+0x1f8>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cc0:	f001 fa7c 	bl	80041bc <vPortExitCritical>
				return pdPASS;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e063      	b.n	8002d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cce:	f001 fa75 	bl	80041bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e05c      	b.n	8002d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fedb 	bl	8003a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cea:	f001 fa67 	bl	80041bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cee:	f000 fc85 	bl	80035fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cf2:	f001 fa33 	bl	800415c <vPortEnterCritical>
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d103      	bne.n	8002d0c <xQueueGenericSend+0x16c>
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSend+0x182>
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d22:	f001 fa4b 	bl	80041bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d26:	1d3a      	adds	r2, r7, #4
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 feca 	bl	8003ac8 <xTaskCheckForTimeOut>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d124      	bne.n	8002d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3c:	f000 fa06 	bl	800314c <prvIsQueueFull>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	3310      	adds	r3, #16
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fe1e 	bl	8003990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d56:	f000 f991 	bl	800307c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d5a:	f000 fc5d 	bl	8003618 <xTaskResumeAll>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f af7c 	bne.w	8002c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <xQueueGenericSend+0x1f8>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	e772      	b.n	8002c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7a:	f000 f97f 	bl	800307c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d7e:	f000 fc4b 	bl	8003618 <xTaskResumeAll>
 8002d82:	e76c      	b.n	8002c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d86:	f000 f979 	bl	800307c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d8a:	f000 fc45 	bl	8003618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d8e:	2300      	movs	r3, #0
		}
	}
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3738      	adds	r7, #56	; 0x38
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <xQueueReceive+0x30>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	623b      	str	r3, [r7, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <xQueueReceive+0x3e>
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <xQueueReceive+0x42>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueReceive+0x44>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueReceive+0x5e>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dfa:	f000 ffb1 	bl	8003d60 <xTaskGetSchedulerState>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <xQueueReceive+0x6e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <xQueueReceive+0x72>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <xQueueReceive+0x74>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <xQueueReceive+0x8e>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	61bb      	str	r3, [r7, #24]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e2a:	f001 f997 	bl	800415c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01f      	beq.n	8002e7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3e:	f000 f8f7 	bl	8003030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00f      	beq.n	8002e72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	3310      	adds	r3, #16
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fdbe 	bl	80039d8 <xTaskRemoveFromEventList>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <xQueueReceive+0x1bc>)
 8002e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e72:	f001 f9a3 	bl	80041bc <vPortExitCritical>
				return pdPASS;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e069      	b.n	8002f4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e80:	f001 f99c 	bl	80041bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e062      	b.n	8002f4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fe02 	bl	8003a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e9c:	f001 f98e 	bl	80041bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ea0:	f000 fbac 	bl	80035fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea4:	f001 f95a 	bl	800415c <vPortEnterCritical>
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d103      	bne.n	8002ebe <xQueueReceive+0x122>
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d103      	bne.n	8002ed4 <xQueueReceive+0x138>
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed4:	f001 f972 	bl	80041bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ed8:	1d3a      	adds	r2, r7, #4
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fdf1 	bl	8003ac8 <xTaskCheckForTimeOut>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d123      	bne.n	8002f34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eee:	f000 f917 	bl	8003120 <prvIsQueueEmpty>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d017      	beq.n	8002f28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fd45 	bl	8003990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f08:	f000 f8b8 	bl	800307c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f0c:	f000 fb84 	bl	8003618 <xTaskResumeAll>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d189      	bne.n	8002e2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <xQueueReceive+0x1bc>)
 8002f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	e780      	b.n	8002e2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f8a7 	bl	800307c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f2e:	f000 fb73 	bl	8003618 <xTaskResumeAll>
 8002f32:	e77a      	b.n	8002e2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f36:	f000 f8a1 	bl	800307c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f3a:	f000 fb6d 	bl	8003618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f40:	f000 f8ee 	bl	8003120 <prvIsQueueEmpty>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f43f af6f 	beq.w	8002e2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3730      	adds	r7, #48	; 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d14d      	bne.n	800301e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ff08 	bl	8003d9c <xTaskPriorityDisinherit>
 8002f8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	e043      	b.n	800301e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6898      	ldr	r0, [r3, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	f001 fc0a 	bl	80047c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d32b      	bcc.n	800301e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e026      	b.n	800301e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68d8      	ldr	r0, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	f001 fbf0 	bl	80047c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	425b      	negs	r3, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	425b      	negs	r3, r3
 8003006:	441a      	add	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d105      	bne.n	800301e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3b01      	subs	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003026:	697b      	ldr	r3, [r7, #20]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d303      	bcc.n	8003064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	461a      	mov	r2, r3
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f001 fba6 	bl	80047c0 <memcpy>
	}
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003084:	f001 f86a 	bl	800415c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003090:	e011      	b.n	80030b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fc9a 	bl	80039d8 <xTaskRemoveFromEventList>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030aa:	f000 fd6f 	bl	8003b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dce9      	bgt.n	8003092 <prvUnlockQueue+0x16>
 80030be:	e000      	b.n	80030c2 <prvUnlockQueue+0x46>
					break;
 80030c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	22ff      	movs	r2, #255	; 0xff
 80030c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030ca:	f001 f877 	bl	80041bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ce:	f001 f845 	bl	800415c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030da:	e011      	b.n	8003100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3310      	adds	r3, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fc75 	bl	80039d8 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030f4:	f000 fd4a 	bl	8003b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003104:	2b00      	cmp	r3, #0
 8003106:	dce9      	bgt.n	80030dc <prvUnlockQueue+0x60>
 8003108:	e000      	b.n	800310c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800310a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	22ff      	movs	r2, #255	; 0xff
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003114:	f001 f852 	bl	80041bc <vPortExitCritical>
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003128:	f001 f818 	bl	800415c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e001      	b.n	800313e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313e:	f001 f83d 	bl	80041bc <vPortExitCritical>

	return xReturn;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003154:	f001 f802 	bl	800415c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	429a      	cmp	r2, r3
 8003162:	d102      	bne.n	800316a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e001      	b.n	800316e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316e:	f001 f825 	bl	80041bc <vPortExitCritical>

	return xReturn;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af04      	add	r7, sp, #16
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	623b      	str	r3, [r7, #32]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	61fb      	str	r3, [r7, #28]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031c2:	23a0      	movs	r3, #160	; 0xa0
 80031c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2ba0      	cmp	r3, #160	; 0xa0
 80031ca:	d00a      	beq.n	80031e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	61bb      	str	r3, [r7, #24]
}
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01e      	beq.n	8003226 <xTaskCreateStatic+0xaa>
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01b      	beq.n	8003226 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003200:	2300      	movs	r3, #0
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f851 	bl	80032c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800321e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003220:	f000 f8e4 	bl	80033ec <prvAddNewTaskToReadyList>
 8003224:	e001      	b.n	800322a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800322a:	697b      	ldr	r3, [r7, #20]
	}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af04      	add	r7, sp, #16
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f849 	bl	80042e0 <pvPortMalloc>
 800324e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003256:	20a0      	movs	r0, #160	; 0xa0
 8003258:	f001 f842 	bl	80042e0 <pvPortMalloc>
 800325c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
 800326a:	e005      	b.n	8003278 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800326c:	6978      	ldr	r0, [r7, #20]
 800326e:	f001 f8fb 	bl	8004468 <vPortFree>
 8003272:	e001      	b.n	8003278 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	2300      	movs	r3, #0
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f80f 	bl	80032c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a2:	69f8      	ldr	r0, [r7, #28]
 80032a4:	f000 f8a2 	bl	80033ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e002      	b.n	80032b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032b4:	69bb      	ldr	r3, [r7, #24]
	}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032d8:	3b01      	subs	r3, #1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f023 0307 	bic.w	r3, r3, #7
 80032e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <prvInitialiseNewTask+0x48>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	617b      	str	r3, [r7, #20]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e012      	b.n	8003334 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	7819      	ldrb	r1, [r3, #0]
 8003316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4413      	add	r3, r2
 800331c:	3334      	adds	r3, #52	; 0x34
 800331e:	460a      	mov	r2, r1
 8003320:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3301      	adds	r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	d9e9      	bls.n	800330e <prvInitialiseNewTask+0x4e>
 800333a:	e000      	b.n	800333e <prvInitialiseNewTask+0x7e>
		{
			break;
 800333c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	2b06      	cmp	r3, #6
 800334a:	d901      	bls.n	8003350 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800334c:	2306      	movs	r3, #6
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	2200      	movs	r2, #0
 8003360:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fac3 	bl	80028f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3318      	adds	r3, #24
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fabe 	bl	80028f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	f1c3 0207 	rsb	r2, r3, #7
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	334c      	adds	r3, #76	; 0x4c
 80033a0:	224c      	movs	r2, #76	; 0x4c
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f973 	bl	8004690 <memset>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <prvInitialiseNewTask+0x120>)
 80033ae:	651a      	str	r2, [r3, #80]	; 0x50
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <prvInitialiseNewTask+0x124>)
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <prvInitialiseNewTask+0x128>)
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	69b8      	ldr	r0, [r7, #24]
 80033c2:	f000 fdd7 	bl	8003f74 <pxPortInitialiseStack>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20001104 	.word	0x20001104
 80033e4:	2000116c 	.word	0x2000116c
 80033e8:	200011d4 	.word	0x200011d4

080033ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f4:	f000 feb2 	bl	800415c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <prvAddNewTaskToReadyList+0xb8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <prvAddNewTaskToReadyList+0xb8>)
 8003400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <prvAddNewTaskToReadyList+0xbc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <prvAddNewTaskToReadyList+0xbc>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <prvAddNewTaskToReadyList+0xb8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d110      	bne.n	800343a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003418:	f000 fbdc 	bl	8003bd4 <prvInitialiseTaskLists>
 800341c:	e00d      	b.n	800343a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <prvAddNewTaskToReadyList+0xc0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <prvAddNewTaskToReadyList+0xbc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	429a      	cmp	r2, r3
 8003432:	d802      	bhi.n	800343a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003434:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <prvAddNewTaskToReadyList+0xbc>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <prvAddNewTaskToReadyList+0xc4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <prvAddNewTaskToReadyList+0xc4>)
 8003442:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <prvAddNewTaskToReadyList+0xc8>)
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <prvAddNewTaskToReadyList+0xcc>)
 8003464:	441a      	add	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7ff fa4c 	bl	800290a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003472:	f000 fea3 	bl	80041bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <prvAddNewTaskToReadyList+0xc0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <prvAddNewTaskToReadyList+0xbc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d207      	bcs.n	800349c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <prvAddNewTaskToReadyList+0xd0>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200004b8 	.word	0x200004b8
 80034a8:	200003b8 	.word	0x200003b8
 80034ac:	200004c4 	.word	0x200004c4
 80034b0:	200004d4 	.word	0x200004d4
 80034b4:	200004c0 	.word	0x200004c0
 80034b8:	200003bc 	.word	0x200003bc
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d017      	beq.n	8003502 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <vTaskDelay+0x60>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <vTaskDelay+0x30>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60bb      	str	r3, [r7, #8]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034f0:	f000 f884 	bl	80035fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fcd6 	bl	8003ea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034fc:	f000 f88c 	bl	8003618 <xTaskResumeAll>
 8003500:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <vTaskDelay+0x64>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200004e0 	.word	0x200004e0
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003536:	463a      	mov	r2, r7
 8003538:	1d39      	adds	r1, r7, #4
 800353a:	f107 0308 	add.w	r3, r7, #8
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc fe10 	bl	8000164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	9202      	str	r2, [sp, #8]
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	460a      	mov	r2, r1
 8003556:	4921      	ldr	r1, [pc, #132]	; (80035dc <vTaskStartScheduler+0xb4>)
 8003558:	4821      	ldr	r0, [pc, #132]	; (80035e0 <vTaskStartScheduler+0xb8>)
 800355a:	f7ff fe0f 	bl	800317c <xTaskCreateStatic>
 800355e:	4603      	mov	r3, r0
 8003560:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <vTaskStartScheduler+0xbc>)
 8003562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <vTaskStartScheduler+0xbc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800356c:	2301      	movs	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e001      	b.n	8003576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11b      	bne.n	80035b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	613b      	str	r3, [r7, #16]
}
 800358e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <vTaskStartScheduler+0xc0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	334c      	adds	r3, #76	; 0x4c
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <vTaskStartScheduler+0xc4>)
 8003598:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <vTaskStartScheduler+0xc8>)
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <vTaskStartScheduler+0xcc>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <vTaskStartScheduler+0xd0>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035ae:	f000 fd63 	bl	8004078 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035b2:	e00e      	b.n	80035d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d10a      	bne.n	80035d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <vTaskStartScheduler+0xa8>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	080048d0 	.word	0x080048d0
 80035e0:	08003ba5 	.word	0x08003ba5
 80035e4:	200004dc 	.word	0x200004dc
 80035e8:	200003b8 	.word	0x200003b8
 80035ec:	2000005c 	.word	0x2000005c
 80035f0:	200004d8 	.word	0x200004d8
 80035f4:	200004c4 	.word	0x200004c4
 80035f8:	200004bc 	.word	0x200004bc

080035fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <vTaskSuspendAll+0x18>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <vTaskSuspendAll+0x18>)
 8003608:	6013      	str	r3, [r2, #0]
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	200004e0 	.word	0x200004e0

08003618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003626:	4b41      	ldr	r3, [pc, #260]	; (800372c <xTaskResumeAll+0x114>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <xTaskResumeAll+0x2c>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	603b      	str	r3, [r7, #0]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003644:	f000 fd8a 	bl	800415c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003648:	4b38      	ldr	r3, [pc, #224]	; (800372c <xTaskResumeAll+0x114>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3b01      	subs	r3, #1
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <xTaskResumeAll+0x114>)
 8003650:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <xTaskResumeAll+0x114>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d161      	bne.n	800371e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <xTaskResumeAll+0x118>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d05d      	beq.n	800371e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003662:	e02e      	b.n	80036c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <xTaskResumeAll+0x11c>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3318      	adds	r3, #24
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f9a5 	bl	80029c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3304      	adds	r3, #4
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f9a0 	bl	80029c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2201      	movs	r2, #1
 8003686:	409a      	lsls	r2, r3
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <xTaskResumeAll+0x120>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <xTaskResumeAll+0x120>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a27      	ldr	r2, [pc, #156]	; (800373c <xTaskResumeAll+0x124>)
 80036a0:	441a      	add	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7ff f92e 	bl	800290a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <xTaskResumeAll+0x128>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <xTaskResumeAll+0x12c>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <xTaskResumeAll+0x11c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1cc      	bne.n	8003664 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036d0:	f000 fb22 	bl	8003d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <xTaskResumeAll+0x130>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036e0:	f000 f836 	bl	8003750 <xTaskIncrementTick>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <xTaskResumeAll+0x12c>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f1      	bne.n	80036e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <xTaskResumeAll+0x130>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <xTaskResumeAll+0x12c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <xTaskResumeAll+0x134>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800371e:	f000 fd4d 	bl	80041bc <vPortExitCritical>

	return xAlreadyYielded;
 8003722:	68bb      	ldr	r3, [r7, #8]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200004e0 	.word	0x200004e0
 8003730:	200004b8 	.word	0x200004b8
 8003734:	20000478 	.word	0x20000478
 8003738:	200004c0 	.word	0x200004c0
 800373c:	200003bc 	.word	0x200003bc
 8003740:	200003b8 	.word	0x200003b8
 8003744:	200004cc 	.word	0x200004cc
 8003748:	200004c8 	.word	0x200004c8
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <xTaskIncrementTick+0x150>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 808d 	bne.w	800387e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <xTaskIncrementTick+0x154>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <xTaskIncrementTick+0x154>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d120      	bne.n	80037ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <xTaskIncrementTick+0x158>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <xTaskIncrementTick+0x48>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskIncrementTick+0x46>
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <xTaskIncrementTick+0x158>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4a41      	ldr	r2, [pc, #260]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a3f      	ldr	r2, [pc, #252]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	f000 faaf 	bl	8003d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d34d      	bcc.n	8003860 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c4:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xTaskIncrementTick+0x82>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xTaskIncrementTick+0x84>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	601a      	str	r2, [r3, #0]
					break;
 80037e0:	e03e      	b.n	8003860 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d203      	bcs.n	8003802 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037fa:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]
						break;
 8003800:	e02e      	b.n	8003860 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f8da 	bl	80029c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3318      	adds	r3, #24
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f8d1 	bl	80029c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2201      	movs	r2, #1
 8003824:	409a      	lsls	r2, r3
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <xTaskIncrementTick+0x168>)
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <xTaskIncrementTick+0x16c>)
 800383e:	441a      	add	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7ff f85f 	bl	800290a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	429a      	cmp	r2, r3
 8003858:	d3b4      	bcc.n	80037c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800385e:	e7b1      	b.n	80037c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4915      	ldr	r1, [pc, #84]	; (80038bc <xTaskIncrementTick+0x16c>)
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d907      	bls.n	8003888 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e004      	b.n	8003888 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003886:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskIncrementTick+0x178>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200004e0 	.word	0x200004e0
 80038a4:	200004bc 	.word	0x200004bc
 80038a8:	20000470 	.word	0x20000470
 80038ac:	20000474 	.word	0x20000474
 80038b0:	200004d0 	.word	0x200004d0
 80038b4:	200004d8 	.word	0x200004d8
 80038b8:	200004c0 	.word	0x200004c0
 80038bc:	200003bc 	.word	0x200003bc
 80038c0:	200003b8 	.word	0x200003b8
 80038c4:	200004c8 	.word	0x200004c8
 80038c8:	200004cc 	.word	0x200004cc

080038cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <vTaskSwitchContext+0xac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <vTaskSwitchContext+0xb0>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e0:	e044      	b.n	800396c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <vTaskSwitchContext+0xb0>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <vTaskSwitchContext+0xb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	f1c3 031f 	rsb	r3, r3, #31
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	4921      	ldr	r1, [pc, #132]	; (8003984 <vTaskSwitchContext+0xb8>)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	607b      	str	r3, [r7, #4]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <vTaskSwitchContext+0x5a>
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <vTaskSwitchContext+0xb8>)
 8003934:	4413      	add	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3308      	adds	r3, #8
 800394a:	429a      	cmp	r2, r3
 800394c:	d104      	bne.n	8003958 <vTaskSwitchContext+0x8c>
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <vTaskSwitchContext+0xbc>)
 8003960:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <vTaskSwitchContext+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	334c      	adds	r3, #76	; 0x4c
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <vTaskSwitchContext+0xc0>)
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	200004e0 	.word	0x200004e0
 800397c:	200004cc 	.word	0x200004cc
 8003980:	200004c0 	.word	0x200004c0
 8003984:	200003bc 	.word	0x200003bc
 8003988:	200003b8 	.word	0x200003b8
 800398c:	2000005c 	.word	0x2000005c

08003990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <vTaskPlaceOnEventList+0x44>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3318      	adds	r3, #24
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe ffc6 	bl	8002950 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039c4:	2101      	movs	r1, #1
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f000 fa6e 	bl	8003ea8 <prvAddCurrentTaskToDelayedList>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200003b8 	.word	0x200003b8

080039d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60fb      	str	r3, [r7, #12]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	3318      	adds	r3, #24
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe ffd9 	bl	80029c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <xTaskRemoveFromEventList+0xac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11c      	bne.n	8003a50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe ffd0 	bl	80029c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	2201      	movs	r2, #1
 8003a26:	409a      	lsls	r2, r3
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <xTaskRemoveFromEventList+0xb0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <xTaskRemoveFromEventList+0xb0>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <xTaskRemoveFromEventList+0xb4>)
 8003a40:	441a      	add	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fe ff5e 	bl	800290a <vListInsertEnd>
 8003a4e:	e005      	b.n	8003a5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3318      	adds	r3, #24
 8003a54:	4619      	mov	r1, r3
 8003a56:	480e      	ldr	r0, [pc, #56]	; (8003a90 <xTaskRemoveFromEventList+0xb8>)
 8003a58:	f7fe ff57 	bl	800290a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <xTaskRemoveFromEventList+0xbc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d905      	bls.n	8003a76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <xTaskRemoveFromEventList+0xc0>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e001      	b.n	8003a7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a7a:	697b      	ldr	r3, [r7, #20]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200004e0 	.word	0x200004e0
 8003a88:	200004c0 	.word	0x200004c0
 8003a8c:	200003bc 	.word	0x200003bc
 8003a90:	20000478 	.word	0x20000478
 8003a94:	200003b8 	.word	0x200003b8
 8003a98:	200004cc 	.word	0x200004cc

08003a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <vTaskInternalSetTimeOutState+0x24>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <vTaskInternalSetTimeOutState+0x28>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200004d0 	.word	0x200004d0
 8003ac4:	200004bc 	.word	0x200004bc

08003ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	613b      	str	r3, [r7, #16]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b0a:	f000 fb27 	bl	800415c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <xTaskCheckForTimeOut+0xbc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d102      	bne.n	8003b2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e023      	b.n	8003b76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <xTaskCheckForTimeOut+0xc0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d007      	beq.n	8003b4a <xTaskCheckForTimeOut+0x82>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e015      	b.n	8003b76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d20b      	bcs.n	8003b6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff9b 	bl	8003a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e004      	b.n	8003b76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f000 fb21 	bl	80041bc <vPortExitCritical>

	return xReturn;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200004bc 	.word	0x200004bc
 8003b88:	200004d0 	.word	0x200004d0

08003b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <vTaskMissedYield+0x14>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200004cc 	.word	0x200004cc

08003ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bac:	f000 f852 	bl	8003c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <prvIdleTask+0x28>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d9f9      	bls.n	8003bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <prvIdleTask+0x2c>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bc8:	e7f0      	b.n	8003bac <prvIdleTask+0x8>
 8003bca:	bf00      	nop
 8003bcc:	200003bc 	.word	0x200003bc
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	e00c      	b.n	8003bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <prvInitialiseTaskLists+0x60>)
 8003bec:	4413      	add	r3, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fe60 	bl	80028b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d9ef      	bls.n	8003be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c00:	480d      	ldr	r0, [pc, #52]	; (8003c38 <prvInitialiseTaskLists+0x64>)
 8003c02:	f7fe fe57 	bl	80028b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c06:	480d      	ldr	r0, [pc, #52]	; (8003c3c <prvInitialiseTaskLists+0x68>)
 8003c08:	f7fe fe54 	bl	80028b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <prvInitialiseTaskLists+0x6c>)
 8003c0e:	f7fe fe51 	bl	80028b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c12:	480c      	ldr	r0, [pc, #48]	; (8003c44 <prvInitialiseTaskLists+0x70>)
 8003c14:	f7fe fe4e 	bl	80028b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c18:	480b      	ldr	r0, [pc, #44]	; (8003c48 <prvInitialiseTaskLists+0x74>)
 8003c1a:	f7fe fe4b 	bl	80028b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <prvInitialiseTaskLists+0x78>)
 8003c20:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <prvInitialiseTaskLists+0x64>)
 8003c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <prvInitialiseTaskLists+0x7c>)
 8003c26:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <prvInitialiseTaskLists+0x68>)
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200003bc 	.word	0x200003bc
 8003c38:	20000448 	.word	0x20000448
 8003c3c:	2000045c 	.word	0x2000045c
 8003c40:	20000478 	.word	0x20000478
 8003c44:	2000048c 	.word	0x2000048c
 8003c48:	200004a4 	.word	0x200004a4
 8003c4c:	20000470 	.word	0x20000470
 8003c50:	20000474 	.word	0x20000474

08003c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c5a:	e019      	b.n	8003c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c5c:	f000 fa7e 	bl	800415c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c60:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <prvCheckTasksWaitingTermination+0x50>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fea7 	bl	80029c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <prvCheckTasksWaitingTermination+0x54>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <prvCheckTasksWaitingTermination+0x54>)
 8003c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvCheckTasksWaitingTermination+0x58>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <prvCheckTasksWaitingTermination+0x58>)
 8003c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c86:	f000 fa99 	bl	80041bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f810 	bl	8003cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <prvCheckTasksWaitingTermination+0x58>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e1      	bne.n	8003c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000048c 	.word	0x2000048c
 8003ca8:	200004b8 	.word	0x200004b8
 8003cac:	200004a0 	.word	0x200004a0

08003cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	334c      	adds	r3, #76	; 0x4c
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fd03 	bl	80046c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fbc9 	bl	8004468 <vPortFree>
				vPortFree( pxTCB );
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fbc6 	bl	8004468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cdc:	e018      	b.n	8003d10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d103      	bne.n	8003cf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fbbd 	bl	8004468 <vPortFree>
	}
 8003cee:	e00f      	b.n	8003d10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d00a      	beq.n	8003d10 <prvDeleteTCB+0x60>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	60fb      	str	r3, [r7, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <prvDeleteTCB+0x5e>
	}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvResetNextTaskUnblockTime+0x40>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <prvResetNextTaskUnblockTime+0x14>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <prvResetNextTaskUnblockTime+0x16>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <prvResetNextTaskUnblockTime+0x44>)
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d3a:	e008      	b.n	8003d4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <prvResetNextTaskUnblockTime+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <prvResetNextTaskUnblockTime+0x44>)
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20000470 	.word	0x20000470
 8003d5c:	200004d8 	.word	0x200004d8

08003d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <xTaskGetSchedulerState+0x34>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	e008      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <xTaskGetSchedulerState+0x38>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e001      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d86:	687b      	ldr	r3, [r7, #4]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200004c4 	.word	0x200004c4
 8003d98:	200004e0 	.word	0x200004e0

08003d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d06e      	beq.n	8003e90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003db2:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <xTaskPriorityDisinherit+0x100>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d00a      	beq.n	8003dd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60fb      	str	r3, [r7, #12]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d044      	beq.n	8003e90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d140      	bne.n	8003e90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fdd4 	bl	80029c0 <uxListRemove>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d115      	bne.n	8003e4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	491f      	ldr	r1, [pc, #124]	; (8003ea0 <xTaskPriorityDisinherit+0x104>)
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xTaskPriorityDisinherit+0xae>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4013      	ands	r3, r2
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f1c3 0207 	rsb	r2, r3, #7
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	2201      	movs	r2, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <xTaskPriorityDisinherit+0x104>)
 8003e7e:	441a      	add	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fe fd3f 	bl	800290a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e90:	697b      	ldr	r3, [r7, #20]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200003b8 	.word	0x200003b8
 8003ea0:	200003bc 	.word	0x200003bc
 8003ea4:	200004c0 	.word	0x200004c0

08003ea8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fd7e 	bl	80029c0 <uxListRemove>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4013      	ands	r3, r2
 8003ede:	4a20      	ldr	r2, [pc, #128]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ee0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d10a      	bne.n	8003f00 <prvAddCurrentTaskToDelayedList+0x58>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003efa:	f7fe fd06 	bl	800290a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003efe:	e026      	b.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d209      	bcs.n	8003f2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fd13 	bl	8002950 <vListInsert>
}
 8003f2a:	e010      	b.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe fd09 	bl	8002950 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d202      	bcs.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6013      	str	r3, [r2, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200004bc 	.word	0x200004bc
 8003f5c:	200003b8 	.word	0x200003b8
 8003f60:	200004c0 	.word	0x200004c0
 8003f64:	200004a4 	.word	0x200004a4
 8003f68:	20000474 	.word	0x20000474
 8003f6c:	20000470 	.word	0x20000470
 8003f70:	200004d8 	.word	0x200004d8

08003f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b04      	subs	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <pxPortInitialiseStack+0x54>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b14      	subs	r3, #20
 8003fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b20      	subs	r3, #32
 8003fba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	08003fcd 	.word	0x08003fcd

08003fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <prvTaskExitError+0x54>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d00a      	beq.n	8003ff6 <prvTaskExitError+0x2a>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <prvTaskExitError+0x28>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60bb      	str	r3, [r7, #8]
}
 8004008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800400a:	bf00      	nop
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0fc      	beq.n	800400c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c
	...

08004030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <pxCurrentTCBConst2>)
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	6808      	ldr	r0, [r1, #0]
 8004036:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800403a:	f380 8809 	msr	PSP, r0
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8811 	msr	BASEPRI, r0
 800404a:	f04e 0e0d 	orr.w	lr, lr, #13
 800404e:	4770      	bx	lr

08004050 <pxCurrentTCBConst2>:
 8004050:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004058:	4806      	ldr	r0, [pc, #24]	; (8004074 <prvPortStartFirstTask+0x1c>)
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	6800      	ldr	r0, [r0, #0]
 800405e:	f380 8808 	msr	MSP, r0
 8004062:	b662      	cpsie	i
 8004064:	b661      	cpsie	f
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	df00      	svc	0
 8004070:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004072:	bf00      	nop
 8004074:	e000ed08 	.word	0xe000ed08

08004078 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800407e:	4b32      	ldr	r3, [pc, #200]	; (8004148 <xPortStartScheduler+0xd0>)
 8004080:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4b2a      	ldr	r3, [pc, #168]	; (800414c <xPortStartScheduler+0xd4>)
 80040a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <xPortStartScheduler+0xd8>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ac:	e009      	b.n	80040c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <xPortStartScheduler+0xd8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <xPortStartScheduler+0xd8>)
 80040b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d0ef      	beq.n	80040ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <xPortStartScheduler+0xd8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d00a      	beq.n	80040f0 <xPortStartScheduler+0x78>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <xPortStartScheduler+0xd8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <xPortStartScheduler+0xd8>)
 80040f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <xPortStartScheduler+0xd8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <xPortStartScheduler+0xd8>)
 8004104:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <xPortStartScheduler+0xdc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <xPortStartScheduler+0xdc>)
 8004114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <xPortStartScheduler+0xdc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <xPortStartScheduler+0xdc>)
 8004120:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004124:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004126:	f000 f8b9 	bl	800429c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <xPortStartScheduler+0xe0>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004130:	f7ff ff92 	bl	8004058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004134:	f7ff fbca 	bl	80038cc <vTaskSwitchContext>
	prvTaskExitError();
 8004138:	f7ff ff48 	bl	8003fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e400 	.word	0xe000e400
 800414c:	200004e4 	.word	0x200004e4
 8004150:	200004e8 	.word	0x200004e8
 8004154:	e000ed20 	.word	0xe000ed20
 8004158:	2000000c 	.word	0x2000000c

0800415c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
}
 8004174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <vPortEnterCritical+0x58>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <vPortEnterCritical+0x58>)
 800417e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <vPortEnterCritical+0x58>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10f      	bne.n	80041a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <vPortEnterCritical+0x5c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	603b      	str	r3, [r7, #0]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <vPortEnterCritical+0x4a>
	}
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <vPortExitCritical+0x4c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <vPortExitCritical+0x24>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	607b      	str	r3, [r7, #4]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <vPortExitCritical+0x4c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <vPortExitCritical+0x4c>)
 80041e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <vPortExitCritical+0x4c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <vPortExitCritical+0x42>
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	2000000c 	.word	0x2000000c
 800420c:	00000000 	.word	0x00000000

08004210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004210:	f3ef 8009 	mrs	r0, PSP
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <pxCurrentTCBConst>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004220:	6010      	str	r0, [r2, #0]
 8004222:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004226:	f04f 0050 	mov.w	r0, #80	; 0x50
 800422a:	f380 8811 	msr	BASEPRI, r0
 800422e:	f7ff fb4d 	bl	80038cc <vTaskSwitchContext>
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	6808      	ldr	r0, [r1, #0]
 8004242:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004246:	f380 8809 	msr	PSP, r0
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	4770      	bx	lr

08004250 <pxCurrentTCBConst>:
 8004250:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
}
 8004270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004272:	f7ff fa6d 	bl	8003750 <xTaskIncrementTick>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <SysTick_Handler+0x40>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <vPortSetupTimerInterrupt+0x30>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <vPortSetupTimerInterrupt+0x38>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <vPortSetupTimerInterrupt+0x3c>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4a08      	ldr	r2, [pc, #32]	; (80042dc <vPortSetupTimerInterrupt+0x40>)
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042be:	4b03      	ldr	r3, [pc, #12]	; (80042cc <vPortSetupTimerInterrupt+0x30>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	e000e010 	.word	0xe000e010
 80042d0:	e000e018 	.word	0xe000e018
 80042d4:	20000000 	.word	0x20000000
 80042d8:	10624dd3 	.word	0x10624dd3
 80042dc:	e000e014 	.word	0xe000e014

080042e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042ec:	f7ff f986 	bl	80035fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042f0:	4b58      	ldr	r3, [pc, #352]	; (8004454 <pvPortMalloc+0x174>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042f8:	f000 f910 	bl	800451c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <pvPortMalloc+0x178>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 808e 	bne.w	8004426 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01d      	beq.n	800434c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004310:	2208      	movs	r2, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	2b00      	cmp	r3, #0
 8004320:	d014      	beq.n	800434c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f023 0307 	bic.w	r3, r3, #7
 8004328:	3308      	adds	r3, #8
 800432a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <pvPortMalloc+0x6c>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	617b      	str	r3, [r7, #20]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d069      	beq.n	8004426 <pvPortMalloc+0x146>
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <pvPortMalloc+0x17c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d864      	bhi.n	8004426 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <pvPortMalloc+0x180>)
 800435e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004360:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <pvPortMalloc+0x180>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004366:	e004      	b.n	8004372 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d903      	bls.n	8004384 <pvPortMalloc+0xa4>
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f1      	bne.n	8004368 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004384:	4b33      	ldr	r3, [pc, #204]	; (8004454 <pvPortMalloc+0x174>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	429a      	cmp	r2, r3
 800438c:	d04b      	beq.n	8004426 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2208      	movs	r2, #8
 8004394:	4413      	add	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	1ad2      	subs	r2, r2, r3
 80043a8:	2308      	movs	r3, #8
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d91f      	bls.n	80043f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <pvPortMalloc+0xf8>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	613b      	str	r3, [r7, #16]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ea:	69b8      	ldr	r0, [r7, #24]
 80043ec:	f000 f8f8 	bl	80045e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <pvPortMalloc+0x17c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	4a18      	ldr	r2, [pc, #96]	; (800445c <pvPortMalloc+0x17c>)
 80043fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <pvPortMalloc+0x17c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <pvPortMalloc+0x184>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d203      	bcs.n	8004412 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <pvPortMalloc+0x17c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a15      	ldr	r2, [pc, #84]	; (8004464 <pvPortMalloc+0x184>)
 8004410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <pvPortMalloc+0x178>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	431a      	orrs	r2, r3
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004426:	f7ff f8f7 	bl	8003618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <pvPortMalloc+0x16a>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <pvPortMalloc+0x168>
	return pvReturn;
 800444a:	69fb      	ldr	r3, [r7, #28]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3728      	adds	r7, #40	; 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200010f4 	.word	0x200010f4
 8004458:	20001100 	.word	0x20001100
 800445c:	200010f8 	.word	0x200010f8
 8004460:	200010ec 	.word	0x200010ec
 8004464:	200010fc 	.word	0x200010fc

08004468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d048      	beq.n	800450c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800447a:	2308      	movs	r3, #8
 800447c:	425b      	negs	r3, r3
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <vPortFree+0xac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <vPortFree+0x44>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60fb      	str	r3, [r7, #12]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <vPortFree+0x62>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60bb      	str	r3, [r7, #8]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <vPortFree+0xac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d019      	beq.n	800450c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d115      	bne.n	800450c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <vPortFree+0xac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	401a      	ands	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044f0:	f7ff f884 	bl	80035fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vPortFree+0xb0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	4a06      	ldr	r2, [pc, #24]	; (8004518 <vPortFree+0xb0>)
 8004500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004502:	6938      	ldr	r0, [r7, #16]
 8004504:	f000 f86c 	bl	80045e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004508:	f7ff f886 	bl	8003618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20001100 	.word	0x20001100
 8004518:	200010f8 	.word	0x200010f8

0800451c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004522:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004526:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <prvHeapInit+0xac>)
 800452a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3307      	adds	r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <prvHeapInit+0xac>)
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <prvHeapInit+0xb0>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <prvHeapInit+0xb0>)
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4413      	add	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004568:	2208      	movs	r2, #8
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <prvHeapInit+0xb4>)
 800457c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <prvHeapInit+0xb4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <prvHeapInit+0xb4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	1ad2      	subs	r2, r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvHeapInit+0xb4>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <prvHeapInit+0xb8>)
 80045aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <prvHeapInit+0xbc>)
 80045b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <prvHeapInit+0xc0>)
 80045b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200004ec 	.word	0x200004ec
 80045cc:	200010ec 	.word	0x200010ec
 80045d0:	200010f4 	.word	0x200010f4
 80045d4:	200010fc 	.word	0x200010fc
 80045d8:	200010f8 	.word	0x200010f8
 80045dc:	20001100 	.word	0x20001100

080045e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <prvInsertBlockIntoFreeList+0xa8>)
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e002      	b.n	80045f4 <prvInsertBlockIntoFreeList+0x14>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d8f7      	bhi.n	80045ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4413      	add	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d108      	bne.n	8004622 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	441a      	add	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d118      	bne.n	8004668 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <prvInsertBlockIntoFreeList+0xac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d00d      	beq.n	800465e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e008      	b.n	8004670 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <prvInsertBlockIntoFreeList+0xac>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e003      	b.n	8004670 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d002      	beq.n	800467e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	200010ec 	.word	0x200010ec
 800468c:	200010f4 	.word	0x200010f4

08004690 <memset>:
 8004690:	4603      	mov	r3, r0
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <strncat>:
 80046a0:	b530      	push	{r4, r5, lr}
 80046a2:	4604      	mov	r4, r0
 80046a4:	7825      	ldrb	r5, [r4, #0]
 80046a6:	4623      	mov	r3, r4
 80046a8:	3401      	adds	r4, #1
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	d1fa      	bne.n	80046a4 <strncat+0x4>
 80046ae:	3a01      	subs	r2, #1
 80046b0:	d304      	bcc.n	80046bc <strncat+0x1c>
 80046b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b6:	f803 4b01 	strb.w	r4, [r3], #1
 80046ba:	b904      	cbnz	r4, 80046be <strncat+0x1e>
 80046bc:	bd30      	pop	{r4, r5, pc}
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d1f5      	bne.n	80046ae <strncat+0xe>
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e7f3      	b.n	80046ae <strncat+0xe>
	...

080046c8 <_reclaim_reent>:
 80046c8:	4b29      	ldr	r3, [pc, #164]	; (8004770 <_reclaim_reent+0xa8>)
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4604      	mov	r4, r0
 80046d0:	4283      	cmp	r3, r0
 80046d2:	d04b      	beq.n	800476c <_reclaim_reent+0xa4>
 80046d4:	69c3      	ldr	r3, [r0, #28]
 80046d6:	b143      	cbz	r3, 80046ea <_reclaim_reent+0x22>
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d144      	bne.n	8004768 <_reclaim_reent+0xa0>
 80046de:	69e3      	ldr	r3, [r4, #28]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	b111      	cbz	r1, 80046ea <_reclaim_reent+0x22>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 f879 	bl	80047dc <_free_r>
 80046ea:	6961      	ldr	r1, [r4, #20]
 80046ec:	b111      	cbz	r1, 80046f4 <_reclaim_reent+0x2c>
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f874 	bl	80047dc <_free_r>
 80046f4:	69e1      	ldr	r1, [r4, #28]
 80046f6:	b111      	cbz	r1, 80046fe <_reclaim_reent+0x36>
 80046f8:	4620      	mov	r0, r4
 80046fa:	f000 f86f 	bl	80047dc <_free_r>
 80046fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004700:	b111      	cbz	r1, 8004708 <_reclaim_reent+0x40>
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f86a 	bl	80047dc <_free_r>
 8004708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470a:	b111      	cbz	r1, 8004712 <_reclaim_reent+0x4a>
 800470c:	4620      	mov	r0, r4
 800470e:	f000 f865 	bl	80047dc <_free_r>
 8004712:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004714:	b111      	cbz	r1, 800471c <_reclaim_reent+0x54>
 8004716:	4620      	mov	r0, r4
 8004718:	f000 f860 	bl	80047dc <_free_r>
 800471c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800471e:	b111      	cbz	r1, 8004726 <_reclaim_reent+0x5e>
 8004720:	4620      	mov	r0, r4
 8004722:	f000 f85b 	bl	80047dc <_free_r>
 8004726:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004728:	b111      	cbz	r1, 8004730 <_reclaim_reent+0x68>
 800472a:	4620      	mov	r0, r4
 800472c:	f000 f856 	bl	80047dc <_free_r>
 8004730:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004732:	b111      	cbz	r1, 800473a <_reclaim_reent+0x72>
 8004734:	4620      	mov	r0, r4
 8004736:	f000 f851 	bl	80047dc <_free_r>
 800473a:	6a23      	ldr	r3, [r4, #32]
 800473c:	b1b3      	cbz	r3, 800476c <_reclaim_reent+0xa4>
 800473e:	4620      	mov	r0, r4
 8004740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004744:	4718      	bx	r3
 8004746:	5949      	ldr	r1, [r1, r5]
 8004748:	b941      	cbnz	r1, 800475c <_reclaim_reent+0x94>
 800474a:	3504      	adds	r5, #4
 800474c:	69e3      	ldr	r3, [r4, #28]
 800474e:	2d80      	cmp	r5, #128	; 0x80
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	d1f8      	bne.n	8004746 <_reclaim_reent+0x7e>
 8004754:	4620      	mov	r0, r4
 8004756:	f000 f841 	bl	80047dc <_free_r>
 800475a:	e7c0      	b.n	80046de <_reclaim_reent+0x16>
 800475c:	680e      	ldr	r6, [r1, #0]
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f83c 	bl	80047dc <_free_r>
 8004764:	4631      	mov	r1, r6
 8004766:	e7ef      	b.n	8004748 <_reclaim_reent+0x80>
 8004768:	2500      	movs	r5, #0
 800476a:	e7ef      	b.n	800474c <_reclaim_reent+0x84>
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	bf00      	nop
 8004770:	2000005c 	.word	0x2000005c

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	2600      	movs	r6, #0
 8004778:	4d0c      	ldr	r5, [pc, #48]	; (80047ac <__libc_init_array+0x38>)
 800477a:	4c0d      	ldr	r4, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477c:	1b64      	subs	r4, r4, r5
 800477e:	10a4      	asrs	r4, r4, #2
 8004780:	42a6      	cmp	r6, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	f000 f87e 	bl	8004884 <_init>
 8004788:	2600      	movs	r6, #0
 800478a:	4d0a      	ldr	r5, [pc, #40]	; (80047b4 <__libc_init_array+0x40>)
 800478c:	4c0a      	ldr	r4, [pc, #40]	; (80047b8 <__libc_init_array+0x44>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	42a6      	cmp	r6, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	f855 3b04 	ldr.w	r3, [r5], #4
 800479c:	4798      	blx	r3
 800479e:	3601      	adds	r6, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a6:	4798      	blx	r3
 80047a8:	3601      	adds	r6, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	08004904 	.word	0x08004904
 80047b0:	08004904 	.word	0x08004904
 80047b4:	08004904 	.word	0x08004904
 80047b8:	08004908 	.word	0x08004908

080047bc <__retarget_lock_acquire_recursive>:
 80047bc:	4770      	bx	lr

080047be <__retarget_lock_release_recursive>:
 80047be:	4770      	bx	lr

080047c0 <memcpy>:
 80047c0:	440a      	add	r2, r1
 80047c2:	4291      	cmp	r1, r2
 80047c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047c8:	d100      	bne.n	80047cc <memcpy+0xc>
 80047ca:	4770      	bx	lr
 80047cc:	b510      	push	{r4, lr}
 80047ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d8:	d1f9      	bne.n	80047ce <memcpy+0xe>
 80047da:	bd10      	pop	{r4, pc}

080047dc <_free_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4605      	mov	r5, r0
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d040      	beq.n	8004866 <_free_r+0x8a>
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f0c      	subs	r4, r1, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfb8      	it	lt
 80047ee:	18e4      	addlt	r4, r4, r3
 80047f0:	f000 f83c 	bl	800486c <__malloc_lock>
 80047f4:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <_free_r+0x8c>)
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b933      	cbnz	r3, 8004808 <_free_r+0x2c>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	4628      	mov	r0, r5
 8004800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004804:	f000 b838 	b.w	8004878 <__malloc_unlock>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d908      	bls.n	800481e <_free_r+0x42>
 800480c:	6820      	ldr	r0, [r4, #0]
 800480e:	1821      	adds	r1, r4, r0
 8004810:	428b      	cmp	r3, r1
 8004812:	bf01      	itttt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	1809      	addeq	r1, r1, r0
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	e7ed      	b.n	80047fa <_free_r+0x1e>
 800481e:	461a      	mov	r2, r3
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b10b      	cbz	r3, 8004828 <_free_r+0x4c>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x42>
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	1850      	adds	r0, r2, r1
 800482c:	42a0      	cmp	r0, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x6c>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	4401      	add	r1, r0
 8004834:	1850      	adds	r0, r2, r1
 8004836:	4283      	cmp	r3, r0
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	d1e0      	bne.n	80047fe <_free_r+0x22>
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4408      	add	r0, r1
 8004842:	6010      	str	r0, [r2, #0]
 8004844:	6053      	str	r3, [r2, #4]
 8004846:	e7da      	b.n	80047fe <_free_r+0x22>
 8004848:	d902      	bls.n	8004850 <_free_r+0x74>
 800484a:	230c      	movs	r3, #12
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	e7d6      	b.n	80047fe <_free_r+0x22>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	1821      	adds	r1, r4, r0
 8004854:	428b      	cmp	r3, r1
 8004856:	bf01      	itttt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	1809      	addeq	r1, r1, r0
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	6054      	str	r4, [r2, #4]
 8004864:	e7cb      	b.n	80047fe <_free_r+0x22>
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20001240 	.word	0x20001240

0800486c <__malloc_lock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_lock+0x8>)
 800486e:	f7ff bfa5 	b.w	80047bc <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	2000123c 	.word	0x2000123c

08004878 <__malloc_unlock>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__malloc_unlock+0x8>)
 800487a:	f7ff bfa0 	b.w	80047be <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	2000123c 	.word	0x2000123c

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
